 QA Automation Challenge â€“ React + Node Todo App
This project demonstrates automated UI and API testing for a simple Todo web application using React (frontend) and Node.js (backend).
________________________________________
Getting Started (Setup Instructions)
1. Clone the Repository
git clone https://github.com/Philip-bot-bot/mern-app.git
git clone https://github.com/Philip-bot-bot/cypress-mern-app.git
2. Install Dependencies
npm install
3. Start the Backend Server
run npm install in root directory
npm run server
4. Start the Frontend App
cd into client run npm install 
make you have"react-scripts": "^5.0.1",
The app should open on http://localhost:3000
5. Backend and frontend run concurrently
Run npm run dev
________________________________________
âœ… How to Run Tests
UI Tests (Cypress)
npx cypress open
# or headless mode
npx cypress run
Cypress tests cover login, adding/editing/deleting todos, and data validation.
I stored custom commands in commands.js to make codes look small and clean
________________________________________
API Tests (Postman)
1.	Open Postman
2.	Import the following:
o	Mern-app-endpoints.postman_collection.json file
3.	Run the test cases manually or via the Collection Runner
4.	View assertion results in the Test Results tab
Includes both positive and negative test cases (e.g., login errors, token checks).
5. Can be found in the postman folder
________________________________________
ðŸ”§ Tech Stack
â€¢	Frontend: React
â€¢	Backend: Node.js + Express
â€¢	Database: MongoDB 
â€¢	UI Testing: Cypress
â€¢	API Testing: Postman

Note on Automation with Newman:
 My API endpoints required a valid token from the POST /login request to authorize subsequent requests like PUT, POST, and DELETE.

Since the token is dynamically generated and typically expires after a short period, I was concerned that running the collection via Newman without a dynamic token-handling setup would cause the tests to fail or appear broken.

As a result, I focused on building and validating the full set of requests manually in Postman. 



