{
	"info": {
		"_postman_id": "77de1613-fe12-4599-9867-4cbb91670f5f",
		"name": "Mern-app-endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19250424"
	},
	"item": [
		{
			"name": "auth success login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Extract the response JSON for assertions\r",
							"const response = pm.response.json();\r",
							"\r",
							"// ✅ Log the token for debugging\r",
							"console.log(\"🔐 Token received:\", response.token);\r",
							"\r",
							"// Test for successful status code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for response time\r",
							"pm.test(\"Response time is less than 5000ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"// Test for the presence of token in the response\r",
							"pm.test(\"Token is present in the response\", () => {\r",
							"    pm.expect(response.token).to.exist;\r",
							"    pm.expect(response.token).to.be.a('string');\r",
							"});\r",
							"\r",
							"//\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"try@yopmail.com\",\r\n  \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/auth",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "wrong password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Extract response JSON\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Status code should be 400\r",
							"pm.test(\"Status code is 400 for wrong password\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"// Response time should be reasonable\r",
							"pm.test(\"Response time is less than 3000ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"// Token should NOT be present\r",
							"pm.test(\"Token should NOT be present\", () => {\r",
							"    pm.expect(response.token).to.not.exist;\r",
							"});\r",
							"\r",
							"// Content-Type should be JSON\r",
							"pm.test(\"Content-Type is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"try@yopmail.com\",\r\n  \"password\": \"1236\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/auth",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "wrong email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 400 for wrong email\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Token should NOT be present\", () => {\r",
							"    pm.expect(response.token).to.not.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"try@pmail.com\",\r\n  \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/auth",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Todo was created\", function () {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res).to.have.property(\"_id\");\r",
							"    pm.expect(res).to.have.property(\"text\");\r",
							"    pm.expect(res).to.have.property(\"tags\");\r",
							"\r",
							"    // Save todo ID for other requests\r",
							"    pm.environment.set(\"todoId\", res._id);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-auth-token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"Buy groceries\",\r\n  \"tagId\": \"688562f64b9bb22e1c8b25d8\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/todos",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"todos"
					]
				}
			},
			"response": []
		},
		{
			"name": "todo no tagid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 - Bad Request\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains validation error for tagId\", function () {\r",
							"    const res = pm.response.json();\r",
							"\r",
							"    pm.expect(res.errors).to.be.an(\"array\");\r",
							"\r",
							"    const tagIdError = res.errors.find(e => e.param === \"tagId\");\r",
							"    pm.expect(tagIdError).to.not.be.undefined;\r",
							"    pm.expect(tagIdError.msg).to.eql(\"Tag is required\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-auth-token",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjg4NTRjMjk3YTg4NGY2YmUzMWYyYTVlIn0sImlhdCI6MTc1NDI1NDk2MCwiZXhwIjoxNzU0NjE0OTYwfQ.dZd_qWDYeA75xpGYRi3iWpHY_dBU-GkMH-cjVLhvtc8",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"Buy groceries\",\r\n  \"tagId\": \"\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/todos",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"todos"
					]
				}
			},
			"response": []
		},
		{
			"name": "todos success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"// Test for status code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for response time\r",
							"pm.test(\"Response time is less than 5 seconds\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"// Test for content type\r",
							"pm.test(\"Content-Type is application/json\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test for response body structure\r",
							"pm.test(\"Response is an array\", () => {\r",
							"    pm.expect(response).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"// Loop through each todo item and test properties\r",
							"response.forEach((todo) => {\r",
							"    pm.test(\"Todo item has required properties\", () => {\r",
							"        pm.expect(todo).to.have.all.keys(\"_id\", \"user\", \"name\", \"text\", \"completed\", \"tags\", \"date\", \"__v\");\r",
							"        pm.expect(todo.completed).to.be.a(\"boolean\");\r",
							"        pm.expect(todo.name).to.be.a(\"string\");\r",
							"        pm.expect(todo.text).to.be.a(\"string\");\r",
							"        pm.expect(todo.date).to.be.a(\"string\");\r",
							"        pm.expect(todo.tags).to.be.an(\"array\");\r",
							"        todo.tags.forEach(tag => {\r",
							"            pm.expect(tag).to.have.all.keys(\"name\", \"_id\");\r",
							"            pm.expect(tag.name).to.be.a(\"string\");\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-auth-token",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjg4NTRjMjk3YTg4NGY2YmUzMWYyYTVlIn0sImlhdCI6MTc1NDI2MDY0NSwiZXhwIjoxNzU0NjIwNjQ1fQ.7OWMUV3IMzlxp9mNE7hH4IAhX9p7-vsa8AxHoK3dXbg",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:5000/api/todos",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"todos"
					]
				}
			},
			"response": []
		},
		{
			"name": "todos no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"// Test for status code\r",
							"pm.test(\"Status code is 401\", () => {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"// Test for response time\r",
							"pm.test(\"Response time is less than 2 seconds\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Test for content type\r",
							"pm.test(\"Content-Type is application/json\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test for response body structure\r",
							"pm.test(\"Response is an object\", () => {\r",
							"    pm.expect(response).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"// Test for response message\r",
							"pm.test(\"Response has a message property\", () => {\r",
							"    pm.expect(response).to.have.property(\"msg\");\r",
							"    pm.expect(response.msg).to.be.a(\"string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-auth-token",
						"value": "yruidjk76348798343",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5000/api/todos",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"todos"
					]
				}
			},
			"response": []
		},
		{
			"name": "update success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"// Check status code\r",
							"pm.expect(pm.response.code).to.equal(200);\r",
							"\r",
							"// Validate response content type\r",
							"pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"\r",
							"// Validate response structure\r",
							"pm.expect(response).to.have.all.keys('_id', 'user', 'name', 'text', 'completed', 'tags', 'date', '__v');\r",
							"\r",
							"// Validate text field\r",
							"pm.expect(response.text).to.exist;\r",
							"pm.expect(response.text).to.be.a('string');\r",
							"\r",
							"// Validate completed field\r",
							"pm.expect(response.completed).to.exist;\r",
							"pm.expect(response.completed).to.be.a('boolean');\r",
							"\r",
							"// Validate tags array\r",
							"pm.expect(response.tags).to.be.an('array');\r",
							"\r",
							"// Loop through tags array and validate each tag\r",
							"response.tags.forEach(tag => {\r",
							"    pm.expect(tag).to.have.all.keys('name', '_id');\r",
							"    pm.expect(tag.name).to.exist;\r",
							"    pm.expect(tag.name).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "x-auth-token",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"Updated: Cypress is awesome!\",\r\n  \"tagId\": \"688562f64b9bb22e1c8b25d6\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/todos/{{todoId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"todos",
						"{{todoId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"// Check status code\r",
							"pm.expect(pm.response.code).to.equal(400);\r",
							"\r",
							"// Validate response content type\r",
							"pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"\r",
							"// Validate response structure for errors\r",
							"pm.expect(response).to.have.all.keys('errors');\r",
							"\r",
							"// Validate errors array\r",
							"pm.expect(response.errors).to.be.an('array');\r",
							"\r",
							"// Loop through errors array and validate each error\r",
							"response.errors.forEach(error => {\r",
							"    pm.expect(error).to.have.all.keys('msg', 'param', 'location');\r",
							"    pm.expect(error.msg).to.exist;\r",
							"    pm.expect(error.msg).to.be.a('string');\r",
							"    pm.expect(error.param).to.exist;\r",
							"    pm.expect(error.param).to.be.a('string');\r",
							"    pm.expect(error.location).to.exist;\r",
							"    pm.expect(error.location).to.be.a('string');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "x-auth-token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"Updated: Cypress is awesome!\",\r\n   \"tag\": \"Personal\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/todos/{{todoId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"todos",
						"{{todoId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for response status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for response time\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// Log request details for debugging\r",
							"console.log(\"Request Name:\", pm.request.name);\r",
							"console.log(\"Request URL:\", pm.request.url.toString());\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-auth-token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5000/api/todos/{{todoId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"todos",
						"{{todoId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for unsuccessful deletion of the todo item\r",
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"// Test for response time\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// Optional: Log request details for debugging\r",
							"pm.info.requestName = pm.request.name;\r",
							"pm.info.requestUrl = pm.request.url.toString();\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-auth-token",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5000/api/todos/{{todoId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"todos",
						"{{todoId}}"
					]
				}
			},
			"response": []
		}
	]
}